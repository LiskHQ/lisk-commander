#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _lockfile = require('lockfile');

var _lockfile2 = _interopRequireDefault(_lockfile);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * LiskHQ/lisky
 * Copyright © 2017 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var nonInteractiveLiskyArg = process.argv[1];
var nonInteractiveCommandArg = process.argv[2];
var nonInteractiveOptions = process.argv.slice(3);

var exit = function exit(code) {
	return process.exit(code || 0);
};

var printWarning = function printWarning(message) {
	return console.warn('\x1b[33m', message, '\x1b[0m');
};
var printError = function printError(message) {
	return console.error('\x1b[31m', message, '\x1b[0m');
};
var printVersion = function printVersion(version) {
	return console.info(version);
};

var execClean = function execClean(path) {
	printWarning('WARNING: Attempting to remove configuration lockfile. I hope you know what you’re doing.');
	_lockfile2.default.unlockSync(path);
};

var isUnknownCommand = function isUnknownCommand(liskyInstance, command) {
	// eslint-disable-next-line no-underscore-dangle
	var firstCommandWords = liskyInstance.commands.map(function (c) {
		return c._name.split(' ')[0];
	});
	return firstCommandWords.indexOf(command) === -1;
};

var setEnvironment = function setEnvironment() {
	process.env.LISKY_CONFIG_DIR = process.env.LISKY_CONFIG_DIR || _os2.default.homedir() + '/.lisky';

	process.env.NON_INTERACTIVE_MODE = !(nonInteractiveLiskyArg.endsWith('lisky') && process.argv.length === 2);
};

var checkNodeVersion = function checkNodeVersion(expected, actual) {
	if (!_semver2.default.satisfies(actual, expected)) {
		throw new Error('ERROR: Requires Node.js version ' + _semver2.default.clean(expected) + ', but was started with version ' + _semver2.default.clean(actual) + '.');
	}
};

var handleBasicCommands = function handleBasicCommands(command, lockFilePath, version) {
	switch (command) {
		case 'clean':
			execClean(lockFilePath);
			return true;
		case '--version':
		case '-v':
			printVersion(version);
			return true;
		default:
			return false;
	}
};

var getLiskyInstanceByMode = function getLiskyInstanceByMode(liskyInstance, nonInteractiveMode) {
	return nonInteractiveMode ? liskyInstance.parse(process.argv) : liskyInstance;
};

var run = function run() {
	setEnvironment();
	try {
		checkNodeVersion(_package2.default.engines.node, process.version);
	} catch (error) {
		printError(error.message);
		exit();
	}

	if (handleBasicCommands(nonInteractiveCommandArg, process.env.LISKY_CONFIG_DIR + '/config.lock', _package2.default.version)) {
		exit();
	}

	// Dynamically required, otherwise it starts the CLI before handling above codes
	// eslint-disable-next-line global-require
	var lisky = require('../dist').default;
	// eslint-disable-next-line global-require
	var execFile = require('../dist/exec_file').default;
	if (isUnknownCommand(lisky, nonInteractiveCommandArg)) {
		try {
			// "execFile" throws error when it "nonInteractiveCommandArg" is not a filepath
			return execFile(lisky, nonInteractiveCommandArg, nonInteractiveOptions, exit);
		} catch (error) {
			return getLiskyInstanceByMode(lisky, process.env.NON_INTERACTIVE_MODE === 'true');
		}
	}
	return getLiskyInstanceByMode(lisky, process.env.NON_INTERACTIVE_MODE === 'true');
};

run();

exports.default = run;
